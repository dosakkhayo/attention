/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// src/main.ts
__export(exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => AttentionPlugin
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  tacitFolder: "",
  attentionFolder: "",
  showAttentionNotice: true,
  showArchiveNotice: true
};
var AttentionSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "attention \uD50C\uB7EC\uADF8\uC778 \uC124\uC815" });
    new import_obsidian.Setting(containerEl).setName("tacit \uD3F4\uB354").setDesc("\uD30C\uC77C\uC744 \uAC00\uC838\uC62C \uD3F4\uB354 \uACBD\uB85C\uB97C \uC785\uB825\uD558\uC138\uC694.").addText((text) => text.setPlaceholder("\uC608: archive").setValue(this.plugin.settings.tacitFolder).onChange(async (value) => {
      this.plugin.settings.tacitFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("attention \uD3F4\uB354").setDesc("\uAC00\uC838\uC628 \uD30C\uC77C\uC774 \uB3C4\uCC29\uD560 \uD3F4\uB354 \uACBD\uB85C\uB97C \uC785\uB825\uD558\uC138\uC694.").addText((text) => text.setPlaceholder("\uC608: attention").setValue(this.plugin.settings.attentionFolder).onChange(async (value) => {
      this.plugin.settings.attentionFolder = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName('"\uC8FC\uC758\uAC00 \uC9D1\uC911\uB418\uC5C8\uC2B5\uB2C8\uB2E4" \uC54C\uB9BC \uD45C\uC2DC').setDesc("\uD30C\uC77C\uC774 attention \uD3F4\uB354\uB85C \uC774\uB3D9\uB420 \uB54C \uC54C\uB9BC\uC744 \uD45C\uC2DC\uD569\uB2C8\uB2E4.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showAttentionNotice).onChange(async (value) => {
      this.plugin.settings.showAttentionNotice = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName('"\uC544\uCE74\uC774\uBE0C \uC644\uB8CC!" \uC54C\uB9BC \uD45C\uC2DC').setDesc("\uD30C\uC77C\uC774 tacit \uD3F4\uB354\uB85C \uC774\uB3D9\uB420 \uB54C \uC54C\uB9BC\uC744 \uD45C\uC2DC\uD569\uB2C8\uB2E4.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showArchiveNotice).onChange(async (value) => {
      this.plugin.settings.showArchiveNotice = value;
      await this.plugin.saveSettings();
    }));
    const bmcContainer = containerEl.createDiv({ cls: "bmc-btn-container", attr: { style: "margin-top:2em; text-align:center;" } });
    bmcContainer.createEl("div", { text: "\uD50C\uB7EC\uADF8\uC778 \uAC1C\uBC1C\uC790\uC5D0\uAC8C \uCEE4\uD53C \uD55C \uC794\uC744 \uD6C4\uC6D0\uD574 \uC8FC\uC138\uC694 \u2615", attr: { style: "margin-bottom:0.5em; font-size:0.95em; color:var(--text-muted);" } });
    const bmcBtn = bmcContainer.createEl("a", {
      href: "https://buymeacoffee.com/dosakkhayo",
      attr: { target: "_blank", rel: "noopener", style: "display:inline-block;" }
    });
    bmcBtn.createEl("img", {
      attr: {
        src: "https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png",
        alt: "Buy Me a Coffee",
        style: "height:40px;width:145px;"
      }
    });
  }
};
async function moveFileToAttentionFolder(app, file, attentionFolder) {
  const fileName = file.name;
  const attentionFolderPath = (0, import_obsidian.normalizePath)(attentionFolder);
  const destFilePath = (0, import_obsidian.normalizePath)(attentionFolderPath + "/" + fileName);
  const folder = app.vault.getAbstractFileByPath(attentionFolderPath);
  if (!folder) {
    await app.vault.createFolder(attentionFolderPath);
  }
  if (app.vault.getAbstractFileByPath(destFilePath)) {
    new import_obsidian.Notice("\uB3C4\uCC29 \uD3F4\uB354\uC5D0 \uC911\uBCF5\uB418\uB294 \uD30C\uC77C\uBA85\uC774 \uC874\uC7AC\uD569\uB2C8\uB2E4.");
    return false;
  }
  await app.vault.rename(file, destFilePath);
  return true;
}
async function moveFileToTacitFolder(app, file, tacitFolder) {
  const fileName = file.name;
  const tacitFolderPath = (0, import_obsidian.normalizePath)(tacitFolder);
  const destFilePath = (0, import_obsidian.normalizePath)(tacitFolderPath + "/" + fileName);
  const folder = app.vault.getAbstractFileByPath(tacitFolderPath);
  if (!folder) {
    await app.vault.createFolder(tacitFolderPath);
  }
  if (app.vault.getAbstractFileByPath(destFilePath)) {
    new import_obsidian.Notice("\uB3C4\uCC29 \uD3F4\uB354\uC5D0 \uC911\uBCF5\uB418\uB294 \uD30C\uC77C\uBA85\uC774 \uC874\uC7AC\uD569\uB2C8\uB2E4.");
    return false;
  }
  await app.vault.rename(file, destFilePath);
  return true;
}
var AttentionPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.handleFileOpen = async (file) => {
      if (!file)
        return;
      if (!this.settings.tacitFolder || !this.settings.attentionFolder)
        return;
      const filePath = file.path;
      if (filePath.startsWith(this.settings.tacitFolder + "/")) {
        try {
          const result = await moveFileToAttentionFolder(this.app, file, this.settings.attentionFolder);
          if (result && this.settings.showAttentionNotice) {
            new import_obsidian.Notice("\uC8FC\uC758\uAC00 \uC9D1\uC911\uB418\uC5C8\uC2B5\uB2C8\uB2E4.");
          }
        } catch (e) {
          new import_obsidian.Notice("\uD30C\uC77C \uC774\uB3D9 \uC2E4\uD328: " + e.message);
        }
      }
    };
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AttentionSettingsTab(this.app, this));
    this.registerEvent(this.app.workspace.on("file-open", this.handleFileOpen));
    this.addCommand({
      id: "move-to-archive",
      name: "\uBCF4\uAD00\uC18C \uD3F4\uB354\uB85C \uC774\uB3D9\uD558\uAE30",
      icon: "archive",
      checkCallback: (checking) => {
        const file = this.app.workspace.getActiveFile();
        if (!file)
          return false;
        if (!this.settings.tacitFolder || !this.settings.attentionFolder)
          return false;
        if (!file.path.startsWith(this.settings.attentionFolder + "/"))
          return false;
        if (!checking) {
          this.archiveFile(file);
        }
        return true;
      },
      hotkeys: []
    });
  }
  async archiveFile(file) {
    var _a, _b;
    try {
      const result = await moveFileToTacitFolder(this.app, file, this.settings.tacitFolder);
      if (result) {
        if (this.settings.showArchiveNotice) {
          new import_obsidian.Notice("\uC544\uCE74\uC774\uBE0C \uC644\uB8CC!");
        }
        const leaves = this.app.workspace.getLeavesOfType("markdown");
        for (const leaf of leaves) {
          if (((_b = (_a = leaf.view) == null ? void 0 : _a.file) == null ? void 0 : _b.path) === file.path) {
            leaf.detach();
            break;
          }
        }
      }
    } catch (e) {
      new import_obsidian.Notice("\uC544\uCE74\uC774\uBE0C \uC2E4\uD328: " + e.message);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
